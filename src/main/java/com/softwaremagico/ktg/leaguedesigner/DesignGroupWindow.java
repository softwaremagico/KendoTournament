/*
 * DesignGroupWindow.java
 *
 * Created on 22 de julio de 2009, 9:04
 */
package com.softwaremagico.ktg.leaguedesigner;

import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import javax.swing.DefaultListModel;
import com.softwaremagico.ktg.gui.NewTeam;
import com.softwaremagico.ktg.KendoTournamentGenerator;
import com.softwaremagico.ktg.MessageManager;
import com.softwaremagico.ktg.Team;
import com.softwaremagico.ktg.language.Translator;

/**
 *
 * @author  jorge
 */
public class DesignGroupWindow extends javax.swing.JFrame {

    private DefaultListModel<String> groupModel = new DefaultListModel<String>();
    DesignedGroup dg;
    private Translator trans = null;
    private boolean refresh = true;

    /** Creates new form DesignGroupWindow */
    public DesignGroupWindow(DesignedGroup tmp_dg) {
        dg = tmp_dg;
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) (this.getWidth() / 2),
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) (this.getHeight() / 2));
        setLanguage(KendoTournamentGenerator.getInstance().language);
        fillGroupArea();
        PassSpinner.setValue(dg.returnMaxNumberOfWinners());
        fillFightingAreas();
        refresh = false;
    }

    private void fillFightingAreas() {
        FightAreaComboBox.removeAllItems();
        try {
            for (int i = 0; i < dg.championship.fightingAreas; i++) {
                if (i < KendoTournamentGenerator.getInstance().shiaijosName.length) {
                    FightAreaComboBox.addItem(KendoTournamentGenerator.getInstance().shiaijosName[i]+"");
                } else {
                    FightAreaComboBox.addItem((i + 1)+"");
                }
            }
        } catch (NullPointerException npe) {
        }
        FightAreaComboBox.setSelectedIndex(dg.arena);
    }

    private void setLanguage(String language) {
        trans = new Translator("gui.xml");
        this.setTitle(trans.returnTag("titleDesignGroupWindow", language));
        UpButton.setText(trans.returnTag("UpButton", language));
        DeleteButton.setText(trans.returnTag("DeleteButton", language));
        DownButton.setText(trans.returnTag("DownButton", language));
        PassLabel.setText(trans.returnTag("PassLabel", language));
        ArenaLabel.setText(trans.returnTag("ArenaLabel", language));
        ShowButton.setText(trans.returnTag("ShowTeam", language));
        CloseButton.setText(trans.returnTag("CloseButton", language));
        TeamLabel.setText(trans.returnTag("Teams", language));
    }

    private void fillGroupArea() {
        groupModel.removeAllElements();
        if (dg.teams != null) {
            for (int i = 0; i < dg.teams.size(); i++) {
                groupModel.addElement(dg.teams.get(i).returnName());
            }
        }
        if (dg.teams.isEmpty()) {
            groupModel.addElement(trans.returnTag("noTeams", KendoTournamentGenerator.getInstance().language));
            disable(true);
        } else {
            GroupList.setSelectedIndex(0);
            disable(false);
        }
    }

    private void disable(boolean value) {
        UpButton.setEnabled(!value);
        DownButton.setEnabled(!value);
        DeleteButton.setEnabled(!value);
    }

    private void showTeam() {
        int index = GroupList.getSelectedIndex();
        Team t = dg.teams.get(index);
        NewTeam newTeam;
        newTeam = new NewTeam(t);
        newTeam.setVisible(true);
    }

    /************************************************
     *
     *                    LISTENERS
     *
     ************************************************/
    /**
     * Add the same action listener to all langugaes of the menu.
     * @param al
     */
    public void addWindowCloseListener(WindowAdapter wa) {
        this.addWindowListener(wa);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GroupScrollPane = new javax.swing.JScrollPane();
        GroupList = new javax.swing.JList<String>();
        UpButton = new javax.swing.JButton();
        DownButton = new javax.swing.JButton();
        PassLabel = new javax.swing.JLabel();
        PassSpinner = new javax.swing.JSpinner();
        ArenaLabel = new javax.swing.JLabel();
        FightAreaComboBox = new javax.swing.JComboBox<String>();
        DeleteButton = new javax.swing.JButton();
        ShowButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        TeamLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        GroupList.setModel(groupModel);
        GroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        GroupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GroupListMouseClicked(evt);
            }
        });
        GroupScrollPane.setViewportView(GroupList);

        UpButton.setText("Up");
        UpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpButtonActionPerformed(evt);
            }
        });

        DownButton.setText("Down");
        DownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownButtonActionPerformed(evt);
            }
        });

        PassLabel.setText("Pass:");

        PassSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PassSpinnerStateChanged(evt);
            }
        });

        ArenaLabel.setText("Arena:");

        FightAreaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FightAreaComboBoxActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        ShowButton.setText("Show");
        ShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowButtonActionPerformed(evt);
            }
        });

        CloseButton.setText("Close");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        TeamLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        TeamLabel.setText("Team order:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ShowButton)
                            .addComponent(DeleteButton)
                            .addComponent(UpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GroupScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
                    .addComponent(CloseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(TeamLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 275, Short.MAX_VALUE)
                        .addComponent(ArenaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FightAreaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PassLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PassSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DeleteButton, DownButton, ShowButton, UpButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PassSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PassLabel)
                    .addComponent(FightAreaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArenaLabel)
                    .addComponent(TeamLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ShowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteButton))
                    .addComponent(GroupScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CloseButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {DeleteButton, DownButton, ShowButton, UpButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void UpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpButtonActionPerformed
        int index = GroupList.getSelectedIndex();
        Team t = dg.teams.remove(index);
        if (index > 0) {
            index--;
        }
        dg.teams.add(index, t);
        fillGroupArea();
        GroupList.setSelectedIndex(index);
    }//GEN-LAST:event_UpButtonActionPerformed

    private void DownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownButtonActionPerformed
        int index = GroupList.getSelectedIndex();
        Team t = dg.teams.remove(index);
        if (index < dg.teams.size()) {
            index++;
        }
        dg.teams.add(index, t);
        fillGroupArea();
        GroupList.setSelectedIndex(index);
    }//GEN-LAST:event_DownButtonActionPerformed

    private void PassSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PassSpinnerStateChanged
        if ((Integer) PassSpinner.getValue() < 1) {
            PassSpinner.setValue(1);
        }
        if (dg.teams.isEmpty()) {
            if ((Integer) PassSpinner.getValue() > dg.numberMaxOfWinnersLeague) {
                PassSpinner.setValue(dg.numberMaxOfWinnersLeague);
            }
        } else if ((Integer) PassSpinner.getValue() > dg.teams.size()) {
            if (dg.teams.size() > 0) {
                PassSpinner.setValue(dg.teams.size());
            } else {
                PassSpinner.setValue(1);
            }
        }
        dg.updateMaxNumberOfWinners((Integer) PassSpinner.getValue());
    }//GEN-LAST:event_PassSpinnerStateChanged

    private void FightAreaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FightAreaComboBoxActionPerformed
        if (!refresh) {
            dg.arena = FightAreaComboBox.getSelectedIndex();
        }
    }//GEN-LAST:event_FightAreaComboBoxActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        if (MessageManager.question("questionRemoveTeam", "Warning!", KendoTournamentGenerator.getInstance().language)) {
            int index = GroupList.getSelectedIndex();
            Team t = dg.teams.remove(index);
            fillGroupArea();
            index--;
            if (index < dg.teams.size() && index >= 0) {
                GroupList.setSelectedIndex(index);
            }
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowButtonActionPerformed
        showTeam();
    }//GEN-LAST:event_ShowButtonActionPerformed

    private void GroupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GroupListMouseClicked
        if (evt.getClickCount() == 2) {
            showTeam();
        }
    }//GEN-LAST:event_GroupListMouseClicked

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       this.toFront();
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArenaLabel;
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton DownButton;
    private javax.swing.JComboBox<String> FightAreaComboBox;
    private javax.swing.JList<String> GroupList;
    private javax.swing.JScrollPane GroupScrollPane;
    private javax.swing.JLabel PassLabel;
    private javax.swing.JSpinner PassSpinner;
    private javax.swing.JButton ShowButton;
    private javax.swing.JLabel TeamLabel;
    private javax.swing.JButton UpButton;
    // End of variables declaration//GEN-END:variables
}
